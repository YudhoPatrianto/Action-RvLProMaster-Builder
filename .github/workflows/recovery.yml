name: Custom Recovery Builder

on:
    workflow_dispatch:
        inputs:
          # Recovery
            RECOVERY: 
                description: "Choose Custom Recovery Want's Build"
                required: true
                type: choice
                options:
                    - twrp-14
                    - twrp-12.1
                    - pbrp-android-12.1
                    - pbrp-android-14.0
            # Brand
            BRAND:
              description: "Choose Your Brand"
              required: true
              type: choice
              options:
                - xiaomi
            # Codename (If Your Codename Not Avaible, Make PR)
            CODENAME:
              description: "Choose Your Codename"
              required: true
              type: choice
              options:
                - selene # Xiaomi Redmi 10
                - fire # Xiaomi Redmi 12
            # Device Tree URL
            DT_LINKS:
                required: true
                description: "Put Your Links Device Tree In Here"
            # Device Tree Branch
            DT_BRANCH:
                required: true
                description: "Put Your Branch Of Device Tree In Here"
            # Build Variant
            BUILD_VARIANT:
              description: "Choose Your Build Variant"
              required: true
              type: choice
              options:
                - bootimage # bootimage (vA/B partititon Devices)
                - vendor_boot # vendor_boot (vA/B partition Devices)
                - recovery # recovery (recovery partition devices)
                - pbrp # pbrp (Flashable Recovery For PBRP)
            # Send TG?
            SEND_TG:
              description: "Send To BOT Telegram?"
              required: true
              default: true
              type: boolean
            # Telegram BOT Token
            TG_TOKEN:
                required: false
                description: "Put Your Telegram BOT Token In Here" # TelegramBOT Token
            # ChatID
            TG_CHAT_ID:
                required: false
                description: "Put Your Telegram BOT Token In Here" # ChatID
jobs:
    build:
        name: 'Compiling Recovery: ${{ inputs.RECOVERY }}'
        runs-on: ubuntu-22.04
        env:
          # SECRET
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Links Recovery
          twrp-14: "https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp -b twrp-14"
          twrp-12-1: "https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp -b twrp-12.1"
          pbrp-14-1: "https://github.com/PitchBlackRecoveryProject/manifest_pb -b android-14.0"
          pbrp-12-1: "https://github.com/PitchBlackRecoveryProject/manifest_pb -b android-12.1"
          
          # Device Sources
          dt-url: ${{ inputs.DT_LINKS }}
          dt-branch: ${{ inputs.DT_BRANCH }}
          brand: ${{ inputs.BRAND }}
          codename: ${{ inputs.CODENAME }}
          find_makefile_types: $(find device/${{ inputs.BRAND }}/${{ inputs.CODENAME}} -name "*_${{ inputs.CODENAME}}.mk*" | sed 's|device/${{ inputs.BRAND }}/${{ inputs.CODENAME}}/||' | sed 's|_${{ inputs.CODENAME }}.mk||')
          device_makefile: $(find device/${{ inputs.BRAND }}/${{ inputs.CODENAME}} -name "*_${{ inputs.CODENAME }}.mk*" | sed 's|device/${{ inputs.BRAND }}/${{ inputs.CODENAME}}/||' | sed 's|.mk||')

          # Telegram Stuff
          tg_token: $(echo "${{ inputs.TG_TOKEN }}" | openssl enc -aes-256-cbc -a -salt -pass pass:"${{ inputs.TG_CHAT_ID }}" -pbkdf2 -iter 10000 | openssl enc -aes-256-cbc -a -d -salt -pass pass:"${{ inputs.TG_CHAT_ID}}" -pbkdf2 -iter 10000)
          tg_chat_id: ${{ inputs.TG_CHAT_ID }}
          BOT_TOKEN: ${{ secrets.TG_TOKEN }}

          # echo color
          text-green: '\033[0;32m'
          text-red: '\033[0;31m'
          text-reset_color: '\033[0m'

          # Format Date and Time
          timedate_utils: $(date +"%A, %d %B %Y %-I:%M %p")

        permissions:
            contents: write

        steps:
            # Checkout
            - name: Checkout
              uses: actions/checkout@v4

            # Check All
            - name: Check All
              run: |
                echo "Recovery: ${{ inputs.RECOVERY }}"
                echo "Codename: ${{ inputs.CODENAME }}"
                echo "Device Tree URL: ${{ inputs.DT_LINKS }}"
                echo "Device Tree Branch: ${{ inputs.DT_BRANCH }}"
                echo "Send Telegram BOT: ${{ inputs.SEND_TG }}"

            # Cleanup Dependencies
            - name: Cleanup Dependencies
              uses: rokibhasansagar/slimhub_actions@main

            # Setting Swap
            - name: Setting Swaps
              uses: pierotofy/set-swap-space@master
              with:
                swap-size-gb: 32

            # Upgrading And Updating Dependencies
            - name: Update And Upgrade Dependencies
              run: |
                sudo apt-get update
                sudo apt-get upgrade -y

            # Installing Dependencies
            - name: Installing Dependencies
              run: |
                sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev repo openssl python2 python3 python-is-python3 jq -y

            # Syncing Recovery
            - name: Syncing Recovery
              run: |
                if [[ ${{inputs.RECOVERY }} == *"twrp-14"* ]]; then
                  echo -e "${{ env.text-green}}[INFO] Syncing Recovery: ${{ inputs.RECOVERY }}${{ env.text-reset_color}}"
                  repo init --depth=1 -u ${{ env.twrp-14 }}
                  repo sync --force-sync --no-clone-bundle
                elif [[ ${{inputs.RECOVERY }} == *"twrp-12.1"* ]]; then
                  echo -e "${{ env.text-green}}[INFO] Syncing Recovery: ${{ inputs.RECOVERY }}${{ env.text-reset_color}}"
                  repo init --depth=1 -u ${{ env.twrp-12-1 }}
                  repo sync --force-sync --no-clone-bundle
                elif [[ ${{inputs.RECOVERY }} == *"pbrp-android-12.1"* ]]; then
                  echo -e "${{ env.text-green}}[INFO] Syncing Recovery: ${{ inputs.RECOVERY }}${{ env.text-reset_color}}"
                  repo init --depth=1 -u ${{ env.pbrp-12-1 }}
                  repo sync --force-sync --no-clone-bundle
                elif [[ ${{inputs.RECOVERY }} == *"pbrp-android-14.0"* ]]; then
                  echo -e "${{ env.text-green}}[INFO] Syncing Recovery: ${{ inputs.RECOVERY }}${{ env.text-reset_color}}"
                  repo init --depth=1 -u ${{ env.pbrp-14-1 }}
                  repo sync --force-sync --no-clone-bundle
                fi

            # Clone Device Tree
            - name: Clonning Device Tree
              run: |
                git clone ${{ env.dt-url }} -b ${{ env.dt-branch }} device/${{ env.brand }}/${{ env.codename }}

            # Building
            - name: Compiling
              run: |
                # Compile twrp-14
                if [[ ${{ inputs.RECOVERY }} == *"twrp-14"* ]]; then
                  if [[ ${{ env.find_makefile_types }} == *"twrp"* ]]; then
                    echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[BUILD]${{ env.text-reset_color }}Building ${{ inputs.RECOVERY }}\nCodename: ${{ env.codename }}\nDevice Tree URL: ${{ inputs.DT_LINKS }}\nDevice Tree Branch: ${{ inputs.DT_BRANCH }}"

                    # Compile
                    function compile_recovery() {
                      st=$(date +%s)
                      source build/envsetup.sh
                      lunch ${{ env.device_makefile }}-eng
                      mka ${{ inputs.BUILD_VARIANT }} -j$(nproc --all) | 2>&1 tee compile_${{ env.device_makefile }}.log
                      en=$(date +%s)
                      result_time=$((en - st))

                      # Minutes And Second
                      export hours=$((result_time / 3600))
                      export minutes=$(((result_time % 3600 ) / 60 ))
                      export seconds=$((result_time % 60))
                    }
                    compile_recovery # Compile Recovery

                    read_logs=$(cat compile_${{ env.device_makefile }})
                    if [[ ${read_logs} == *"build completed successfully"* ]]; then
                      if [[${{ inputs.SEND_TG }} == *"true"* ]]; then
                        # Send Logs
                        echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading Logs To Telegram BOT"
                        curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                          -F chat_id=${{ env.tg_chat_id }} \
                          -F document="@compile_${{ env.device_makefile }}" \
                          -F caption="*Build Success For Device* \`${{ env.codename }}\`" \
                          -F parse_mode="Markdown" \
                          -F disable_notification=False \
                          | jq -r '.result'

                          #  Upload File But Spesify Build Variant
                          if [[ ${{ inputs.BUILD_VARIANT }} == *"bootimage"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/boot.img out/target/product/${{ env.codename }}/boot-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/boot-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"vendor_boot"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/vendor_boot.img out/target/product/${{ env.codename }}/vendor_boot-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/vendor_boot-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"recovery"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/recovery.img out/target/product/${{ env.codename }}/recovery-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/recovery-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"pbrp"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            find_zipfile=$(find out/target/product/${{ env.codename }} -name "*PBRP-${{ env.codename }}-*")

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@${find_zipfile}" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          fi
                      fi
                    else
                    fi
                  else
                    echo -e "[${{env.timedate_utils }}]${{ env.text-red }}[ERROR]${{ env.text-reset_color }}Unable To Build ${{ inputs.RECOVERY }}\nReason: Incorrect Device Makefile\nHint: Please Use twrp_<codename>.mk"
                  fi
                fi

                # Compile twrp-12.1
                if [[ ${{ inputs.RECOVERY }} == *"twrp-12.1"* ]]; then
                  if [[ ${{ env.find_makefile_types }} == *"twrp"* ]]; then
                    echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[BUILD]${{ env.text-reset_color }}Building ${{ inputs.RECOVERY }}\nCodename: ${{ env.codename }}\nDevice Tree URL: ${{ inputs.DT_LINKS }}\nDevice Tree Branch: ${{ inputs.DT_BRANCH }}"

                    # Compile
                    function compile_recovery() {
                      st=$(date +%s)
                      source build/envsetup.sh
                      lunch ${{ env.device_makefile }}-eng
                      mka ${{ inputs.BUILD_VARIANT }} -j$(nproc --all) | 2>&1 tee compile_${{ env.device_makefile }}.log
                      en=$(date +%s)
                      result_time=$((en - st))

                      # Minutes And Second
                      export hours=$((result_time / 3600))
                      export minutes=$(((result_time % 3600 ) / 60 ))
                      export seconds=$((result_time % 60))
                    }
                    compile_recovery # Compile Recovery

                    read_logs=$(cat compile_${{ env.device_makefile }})
                    if [[ ${read_logs} == *"build completed successfully"* ]]; then
                      if [[${{ inputs.SEND_TG }} == *"true"* ]]; then
                        # Send Logs
                        echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading Logs To Telegram BOT"
                        curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                          -F chat_id=${{ env.tg_chat_id }} \
                          -F document="@compile_${{ env.device_makefile }}" \
                          -F caption="*Build Success For Device* \`${{ env.codename }}\`" \
                          -F parse_mode="Markdown" \
                          -F disable_notification=False \
                          | jq -r '.result'

                          #  Upload File But Spesify Build Variant
                          if [[ ${{ inputs.BUILD_VARIANT }} == *"bootimage"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/boot.img out/target/product/${{ env.codename }}/boot-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/boot-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"vendor_boot"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/vendor_boot.img out/target/product/${{ env.codename }}/vendor_boot-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/vendor_boot-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"recovery"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/recovery.img out/target/product/${{ env.codename }}/recovery-twrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/recovery-twrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"pbrp"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            find_zipfile=$(find out/target/product/${{ env.codename }} -name "*PBRP-${{ env.codename }}-*")

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@${find_zipfile}" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          fi
                      fi
                    else
                    fi
                  else
                    echo -e "[${{env.timedate_utils }}]${{ env.text-red }}[ERROR]${{ env.text-reset_color }}Unable To Build ${{ inputs.RECOVERY }}\nReason: Incorrect Device Makefile\nHint: Please Use twrp_<codename>.mk"
                  fi
                fi

                # Compile pbrp-android-14.0
                if [[ ${{ inputs.RECOVERY }} == *"pbrp-android-14.0"* ]]; then
                  if [[ ${{ env.find_makefile_types }} == *"pb"* ]]; then
                    echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[BUILD]${{ env.text-reset_color }}Building ${{ inputs.RECOVERY }}\nCodename: ${{ env.codename }}\nDevice Tree URL: ${{ inputs.DT_LINKS }}\nDevice Tree Branch: ${{ inputs.DT_BRANCH }}"

                    # Compile
                    function compile_recovery() {
                      st=$(date +%s)
                      source build/envsetup.sh
                      lunch ${{ env.device_makefile }}-eng
                      mka ${{ inputs.BUILD_VARIANT }} -j$(nproc --all) | 2>&1 tee compile_${{ env.device_makefile }}.log
                      en=$(date +%s)
                      result_time=$((en - st))

                      # Minutes And Second
                      export hours=$((result_time / 3600))
                      export minutes=$(((result_time % 3600 ) / 60 ))
                      export seconds=$((result_time % 60))
                    }
                    compile_recovery # Compile Recovery

                    read_logs=$(cat compile_${{ env.device_makefile }})
                    if [[ ${read_logs} == *"build completed successfully"* ]]; then
                      if [[${{ inputs.SEND_TG }} == *"true"* ]]; then
                        # Send Logs
                        echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading Logs To Telegram BOT"
                        curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                          -F chat_id=${{ env.tg_chat_id }} \
                          -F document="@compile_${{ env.device_makefile }}" \
                          -F caption="*Build Success For Device* \`${{ env.codename }}\`" \
                          -F parse_mode="Markdown" \
                          -F disable_notification=False \
                          | jq -r '.result'

                          #  Upload File But Spesify Build Variant
                          if [[ ${{ inputs.BUILD_VARIANT }} == *"bootimage"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/boot.img out/target/product/${{ env.codename }}/boot-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/boot-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"vendor_boot"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/vendor_boot.img out/target/product/${{ env.codename }}/vendor_boot-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/vendor_boot-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"recovery"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/recovery.img out/target/product/${{ env.codename }}/recovery-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/recovery-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"pbrp"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            find_zipfile=$(find out/target/product/${{ env.codename }} -name "*PBRP-${{ env.codename }}-*")

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@${find_zipfile}" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          fi
                      fi
                    else
                    fi
                  else
                    echo -e "[${{env.timedate_utils }}]${{ env.text-red }}[ERROR]${{ env.text-reset_color }}Unable To Build ${{ inputs.RECOVERY }}\nReason: Incorrect Device Makefile\nHint: Please Use pb_<codename>.mk"
                  fi
                fi

                # Compile pbrp-android-12.1
                if [[ ${{ inputs.RECOVERY }} == *"pbrp-android-12.1"* ]]; then
                  if [[ ${{ env.find_makefile_types }} == *"pb"* ]]; then
                    echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[BUILD]${{ env.text-reset_color }}Building ${{ inputs.RECOVERY }}\nCodename: ${{ env.codename }}\nDevice Tree URL: ${{ inputs.DT_LINKS }}\nDevice Tree Branch: ${{ inputs.DT_BRANCH }}"

                    # Compile
                    function compile_recovery() {
                      st=$(date +%s)
                      source build/envsetup.sh
                      lunch ${{ env.device_makefile }}-eng
                      mka ${{ inputs.BUILD_VARIANT }} -j$(nproc --all) | 2>&1 tee compile_${{ env.device_makefile }}.log
                      en=$(date +%s)
                      result_time=$((en - st))

                      # Minutes And Second
                      export hours=$((result_time / 3600))
                      export minutes=$(((result_time % 3600 ) / 60 ))
                      export seconds=$((result_time % 60))
                    }
                    compile_recovery # Compile Recovery

                    read_logs=$(cat compile_${{ env.device_makefile }})
                    if [[ ${read_logs} == *"build completed successfully"* ]]; then
                      if [[${{ inputs.SEND_TG }} == *"true"* ]]; then
                        # Send Logs
                        echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading Logs To Telegram BOT"
                        curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                          -F chat_id=${{ env.tg_chat_id }} \
                          -F document="@compile_${{ env.device_makefile }}" \
                          -F caption="*Build Success For Device* \`${{ env.codename }}\`" \
                          -F parse_mode="Markdown" \
                          -F disable_notification=False \
                          | jq -r '.result'

                          #  Upload File But Spesify Build Variant
                          if [[ ${{ inputs.BUILD_VARIANT }} == *"bootimage"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/boot.img out/target/product/${{ env.codename }}/boot-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/boot-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"vendor_boot"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/vendor_boot.img out/target/product/${{ env.codename }}/vendor_boot-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/vendor_boot-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"recovery"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            read_builddate=$(out/build_date.txt)
                            mv out/target/product/${{ env.codename }}/recovery.img out/target/product/${{ env.codename }}/recovery-pbrp_${{ env.codename }}-${read_builddate}.img

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@out/target/product/${{ env.codename }}/recovery-pbrp_${{ env.codename }}-${read_builddate}.img" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          elif [[ ${{ inputs.BUILD_VARIANT }} == *"pbrp"* ]]; then
                            echo -e "[${{ env.timedate_utils }}]${{ env.text-green }}[UPLOAD]${{ env.text-reset_color }} Uploading File Compile To Telegram BOT"
                            find_zipfile=$(find out/target/product/${{ env.codename }} -name "*PBRP-${{ env.codename }}-*")

                            # Send File
                            curl -s -X POST "http://apibot.dhooo.biz.id/bot${{ env.BOT_TOKEN }}/sendDocument" \
                              -F chat_id=${{ env.tg_chat_id }} \
                              -F document="@${find_zipfile}" \
                              -F caption="*Build Success Take Time* \`${hours}\`*h* \`${minutes}\`*m* \`${seconds}\`*s*" \
                              -F parse_mode="Markdown" \
                              -F disable_notification=False \
                              | jq -r '.result'
                          fi
                      fi
                    else
                    fi
                  else
                    echo -e "[${{env.timedate_utils }}]${{ env.text-red }}[ERROR]${{ env.text-reset_color }}Unable To Build ${{ inputs.RECOVERY }}\nReason: Incorrect Device Makefile\nHint: Please Use pb_<codename>.mk"
                  fi
                fi


            # Upload to release
            - name: Upload To Releases
              uses: softprops/action-gh-release@master
              if: inputs.SEND_TG == 'false'
              with:
                files: |
                  compile-${{ env.device_makefile }}.log
                  out/target/product/${{ env.codename }}/PBRP*.zip
                  out/target/product/${{ env.codename }}/twrp-installer*.zip
                  out/target/product/${{ env.codename }}/*.zip
                  out/target/product/${{ env.codename}}/boot.img